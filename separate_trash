#!/usr/bin/env python3

import os
import json
from pathlib import Path

import cv2
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

import torch

# import mmcv
from mmcv import Config
from mmdet.datasets import build_dataloader, build_dataset
from mmdet.models import build_detector
from mmdet.apis import single_gpu_test
from mmcv.runner import load_checkpoint
from mmcv.parallel import MMDataParallel

from pycocotools.coco import COCO

from utils.ensemble_inference import nmw_ensemble

dummy_coco_json = {
    'info': [],
    'licenses': [],
    'images': [],
    'categories': [{
        'id': 0,
        'name': 'General trash',
        'supercategory': 'General trash'
    }, {
        'id': 1,
        'name': 'Paper',
        'supercategory': 'Paper'
    }, {
        'id': 2,
        'name': 'Paper pack',
        'supercategory': 'Paper pack'
    }, {
        'id': 3,
        'name': 'Metal',
        'supercategory': 'Metal'
    }, {
        'id': 4,
        'name': 'Glass',
        'supercategory': 'Glass'
    }, {
        'id': 5,
        'name': 'Plastic',
        'supercategory': 'Plastic'
    }, {
        'id': 6,
        'name': 'Styrofoam',
        'supercategory': 'Styrofoam'
    }, {
        'id': 7,
        'name': 'Plastic bag',
        'supercategory': 'Plastic bag'
    }, {
        'id': 8,
        'name': 'Battery',
        'supercategory': 'Battery'
    }, {
        'id': 9,
        'name': 'Clothing',
        'supercategory': 'Clothing'
    }],
    'annotations': []
}

dummy_coco_image = {
    "width": 1024,
    "height": 1024,
    "file_name": None,  # need
    "license": 0,
    "flickr_url": None,
    "coco_url": None,
    "date_captured": None,
    "id": None  # need
}


class DrawBBox:
    def __init__(self, score_thrs=0.8):

        self.maxCol = 6
        self.maxRow = 6
        self.maxImg = self.maxCol * self.maxRow
        self.score_thrs = score_thrs

        self.pltColorDict = {
            0: plt.cm.tab20(1),
            1: plt.cm.tab20(3),
            2: plt.cm.tab20(5),
            3: plt.cm.tab20(7),
            4: plt.cm.tab20(9),
            5: plt.cm.tab20(11),
            6: plt.cm.tab20(13),
            7: plt.cm.tab20(15),
            8: plt.cm.tab20(17),
            9: plt.cm.tab20(19),
        }

        self.catDict = {
            0: 'General trash',
            1: 'Paper',
            2: 'Paper pack',
            3: 'Metal',
            4: 'Glass',
            5: 'Plastic',
            6: 'Styrofoam',
            7: 'Plastic bag',
            8: 'Battery',
            9: 'Clothing',
        }

    def pltColor2RGB(self, color):
        _color = np.array(color) * 255
        return _color[:3]

    def draw_bboxes_from_output(self, image, boxes, scores, labels, ax):
        # output: [x_min, y_min, x_max, y_max]
        _image = image.copy()
        for bbox, catId, score in zip(boxes, labels, scores):
            if score < self.score_thrs:
                continue
            x_min = int(bbox[0])
            y_min = int(bbox[1])
            x_max = int(bbox[2])
            y_max = int(bbox[3])
            _color = self.pltColorDict[catId]
            _image = cv2.rectangle(_image, (x_min, y_min), (x_max, y_max),
                                   self.pltColor2RGB(_color), 3)
            # ax.text(x_min, y_min, cat_dict[_bbox[4]], color='w', fontsize=6, bbox=dict(facecolor=_color, lw=0))
            ax.text(
                x_min,
                y_min,
                f"{self.catDict[catId]}: {score:.3f}",
                # ha='center',
                va='bottom',
                weight='bold',
                fontsize=7,
                bbox=dict(facecolor=_color, lw=0, pad=1))
        ax.imshow(_image)
        ax.axis("off")

    def draw_bbox(self,
                  images,
                  boxes,
                  scores,
                  labels,
                  save_path='infer_image'):

        Path(save_path).mkdir(exist_ok=True)

        for image_name, box, score, label in zip(images, boxes, scores,
                                                 labels):
            fig, axes = plt.subplots(1,
                                     1,
                                     figsize=(5, 5),
                                     sharey=True,
                                     sharex=True)
            _image_name = Path(image_name).name
            image = cv2.imread(image_name, cv2.IMREAD_COLOR)
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            self.draw_bboxes_from_output(image,
                                         boxes=box,
                                         scores=score,
                                         labels=label,
                                         ax=axes)
            axes.text(0, -1, f"pred: {_image_name}", size=11)

            fig.tight_layout()
            fig.savefig(f'{save_path}/{_image_name}', dpi=200)
            plt.close()


class InferMMDet:
    def __init__(self,
                 config_file,
                 work_dir,
                 checkpoint_file,
                 samples_per_gpu: int = None,
                 workers_per_gpu: int = None,
                 gpu_ids=[0]) -> None:
        self.cfg = Config.fromfile(config_file)

        self.cfg.gpu_ids = gpu_ids

        self.cfg.work_dir = work_dir

        # cfg.optimizer_config.grad_clip = dict(max_norm=35, norm_type=2)
        self.cfg.model.train_cfg = None

        # checkpoint path
        checkpoint_path = os.path.join(self.cfg.work_dir, checkpoint_file)

        model = build_detector(
            self.cfg.model,
            test_cfg=self.cfg.get('test_cfg'))  # build detector
        checkpoint = load_checkpoint(model,
                                     checkpoint_path,
                                     map_location='cpu')  # ckpt load
        # checkpoint = load_checkpoint(model, checkpoint_path) # ckpt load
        self.checkpoint = checkpoint

        model = MMDataParallel(model.cuda(), device_ids=[0])
        self.model = model

    def load_data(self,
                  ann_file,
                  samples_per_gpu: int = None,
                  workers_per_gpu: int = None):

        if samples_per_gpu:
            self.cfg.data.samples_per_gpu = samples_per_gpu
        if workers_per_gpu:
            self.cfg.data.workers_per_gpu = workers_per_gpu

        # build dataset & dataloader
        self.cfg.data.test.ann_file = ann_file
        dataset = build_dataset(self.cfg.data.test)
        self.model.CLASSES = dataset.CLASSES
        self.data_loader = build_dataloader(
            dataset,
            samples_per_gpu=self.cfg.data.samples_per_gpu,
            workers_per_gpu=self.cfg.data.workers_per_gpu,
            dist=False,
            shuffle=False)

    def inference(self):
        return single_gpu_test(self.model,
                               self.data_loader,
                               show_score_thr=0.05)  # output 계산

    def output2dataframe(self, output, save_file_name=None):
        assert output, 'output required !!'
        # submission 양식에 맞게 output 후처리
        prediction_strings = []
        file_names = []
        coco = COCO(self.cfg.data.test.ann_file)
        img_ids = coco.getImgIds()

        class_num = 10
        for i, out in enumerate(output):
            prediction_string = ''
            image_info = coco.loadImgs(coco.getImgIds(imgIds=img_ids[i]))[0]
            for j in range(class_num):
                for o in out[j]:
                    prediction_string += str(j) + ' ' + str(o[4]) + ' ' + str(
                        o[0]) + ' ' + str(o[1]) + ' ' + str(o[2]) + ' ' + str(
                            o[3]) + ' '

            prediction_strings.append(prediction_string)
            file_names.append(image_info['file_name'])

        submission = pd.DataFrame()
        submission['PredictionString'] = prediction_strings
        submission['image_id'] = file_names
        if save_file_name:
            submission.to_csv(os.path.join(self.cfg.work_dir, save_file_name),
                              index=None)
        return submission


def main(imgs_path: list or str = None, json_path: str = None):
    def infer_module(work_dir, config_file, checkpoint_file):
        infer_model = InferMMDet(config_file=config_file,
                                 work_dir=work_dir,
                                 checkpoint_file=checkpoint_file)
        infer_model.load_data(tmp_coco_json_file)
        output = infer_model.inference()
        return infer_model.output2dataframe(output)

    if imgs_path:
        if type(imgs_path) == str:
            imgs_path = [imgs_path]
        tmp_coco_json_file = './tmp_COCO.ADream.json'
        tmp_coco_json_file = os.path.abspath(tmp_coco_json_file)
        tmp_coco_json = dummy_coco_json.copy()
        for idx, img_path in enumerate(imgs_path):
            tmp_coco_image = dummy_coco_image.copy()
            tmp_coco_image['file_name'] = os.path.abspath(img_path)
            tmp_coco_image['id'] = idx
            tmp_coco_json['images'].append(tmp_coco_image)

        with open(tmp_coco_json_file, 'w') as f:
            json.dump(tmp_coco_json, f, indent=2)
    elif json_path:
        tmp_coco_json_file = json_path
    else:
        raise PermissionError

    dfs = []

    work_dir = '../p_stage_obj_det/mmdet/config/work_dirs/test'
    config_file = 'mmdet_config/models/swin/swin-s_fpn_htc_soft-nms_AdamW-2x.py'
    checkpoint_file = '4th-model_epoch_4.pth'

    df = infer_module(work_dir=work_dir,
                      config_file=config_file,
                      checkpoint_file=checkpoint_file)
    dfs.append(df)

    bboxes, scores, labels = nmw_ensemble(dfs=dfs, weights=[1])

    draw_bbox = DrawBBox()
    draw_bbox.draw_bbox(imgs_path, bboxes, scores, labels)

    if imgs_path:
        os.remove(tmp_coco_json_file)


if __name__ == '__main__':
    import argparse

    def parse_args():
        parser = argparse.ArgumentParser(description='Find categories')
        parser.add_argument('-img',
                            '--images',
                            type=str,
                            nargs='+',
                            help='train config file path')
        args = parser.parse_args()
        return args

    args = parse_args()
    main(args.images)
